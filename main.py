#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GrandPaQuiz_bot_web ‚Äî Telegram quiz for grandpa Sergey üéÇ
aiogram 3.x | Webhook-mode for Render Web Service
"""
import os
import json
import asyncio
from datetime import datetime
from typing import List, Dict, Any, Set

from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

# --- CONFIG ---
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "").rstrip("/") + "/webhook"
QUESTIONS_FILE = os.getenv("QUESTIONS_FILE", "questions.json")
RESULTS_FILE = os.getenv("RESULTS_FILE", "results.json")
PORT = int(os.getenv("PORT", "10000"))
LEADERS_TOP_N = int(os.getenv("LEADERS_TOP_N", "10"))

# --- DATA ---
def load_questions(path: str) -> List[Dict[str, Any]]:
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

def reset_results(path: str):
    with open(path, "w", encoding="utf-8") as f:
        json.dump([], f, ensure_ascii=False, indent=2)

def save_result(path: str, record: Dict[str, Any]):
    try:
        data = json.load(open(path, "r", encoding="utf-8"))
    except Exception:
        data = []
    data.append(record)
    json.dump(data, open(path, "w", encoding="utf-8"), ensure_ascii=False, indent=2)

def leaderboard_text(path: str, top: int = 10) -> str:
    try:
        results = json.load(open(path, "r", encoding="utf-8"))
    except Exception:
        return "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
    if not results:
        return "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
    best = {}
    for r in results:
        n = r.get("name", "–ë–µ–∑ –∏–º–µ–Ω–∏")
        s = int(r.get("score", 0))
        t = int(r.get("total", 0))
        if n not in best or s > best[n]["score"]:
            best[n] = {"score": s, "total": t}
    table = sorted(best.items(), key=lambda kv: (-kv[1]["score"], kv[0].lower()))
    lines = ["üèÜ –†–µ–π—Ç–∏–Ω–≥:", ""]
    for i, (n, st) in enumerate(table[:top], 1):
        lines.append(f"{i}. {n} ‚Äî {st['score']}/{st['total']}")
    return "\n".join(lines)

questions = load_questions(QUESTIONS_FILE)

# --- FSM ---
class Quiz(StatesGroup):
    name = State()
    quiz = State()

from aiogram import Router
router = Router ()

# --- Keyboards ---
def kb_start():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É", callback_data="start_quiz")]
    ])

def kb_single(opts, qid):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=o, callback_data=f"s:{qid}:{i}")] for i, o in enumerate(opts)
    ])

def kb_multi(opts, qid, sel: Set[int]):
    rows = [[InlineKeyboardButton(text=("‚òë " if i in sel else "‚òê ") + o, callback_data=f"m:{qid}:{i}")]
            for i, o in enumerate(opts)]
    rows += [
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"ms:{qid}")],
        [InlineKeyboardButton(text="‚Ü© –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä", callback_data=f"mc:{qid}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

# --- Handlers ---
@router.message(CommandStart())
async def start_cmd(msg: types.Message):
    await msg.answer(
        "üéÇ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø—Ä–æ –¥–µ–¥—É—à–∫—É –°–µ—Ä—ë–∂—É üéâ\n"
        "–ö—Ç–æ –∑–Ω–∞–µ—Ç –µ–≥–æ –ª—É—á—à–µ –≤—Å–µ—Ö? üèÜ",
        reply_markup=kb_start()
    )

@router.callback_query(F.data == "start_quiz")
async def begin(cb: CallbackQuery, state: FSMContext):
    await state.set_state(Quiz.name)
    await cb.message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, –≥–µ—Ä–æ–π? üòä")
    await cb.answer()

@router.message(Quiz.name)
async def got_name(msg: types.Message, state: FSMContext):
    await state.update_data(name=msg.text.strip(), score=0, qid=0, multi={})
    await msg.answer(f"–û—Ç–ª–∏—á–Ω–æ, {msg.text.strip()}! –ü–æ–µ—Ö–∞–ª–∏ üöÄ")
    await ask_next(msg.chat.id, state)

async def ask_next(cid: int, state: FSMContext):
    data = await state.get_data()
    qid = data.get("qid", 0)
    if qid >= len(questions):
        name, score = data["name"], data["score"]
        total = sum(len(q["answer_index"]) if q["type"] == "multi" else 1 for q in questions)
        save_result(RESULTS_FILE, {"name": name, "score": score, "total": total, "ts": datetime.now().isoformat()})
        bot: Bot = state.bot  # type: ignore
        await bot.send_message(cid, f"üéâ {name}, —Ç—ã –Ω–∞–±—Ä–∞–ª <b>{score}</b> –∏–∑ <b>{total}</b> –±–∞–ª–ª–æ–≤! üíØ",
                               parse_mode=ParseMode.HTML)
        await bot.send_message(cid, leaderboard_text(RESULTS_FILE, LEADERS_TOP_N))
        await state.clear()
        return
    q = questions[qid]
    text = f"–í–æ–ø—Ä–æ—Å {qid+1}/{len(questions)}\n\n<b>{q['question']}</b>"
    bot: Bot = state.bot  # type: ignore
    if q["type"] == "single":
        await bot.send_message(cid, text, reply_markup=kb_single(q["options"], qid), parse_mode=ParseMode.HTML)
    else:
        multi = data.get("multi", {}).get(str(qid), [])
        await bot.send_message(cid, text + "\n(–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)",
                               reply_markup=kb_multi(q["options"], qid, set(multi)), parse_mode=ParseMode.HTML)

# --- Single / Multi ---
@router.callback_query(F.data.startswith("s:"))
async def single(cb: CallbackQuery, state: FSMContext):
    _, qid, opt = cb.data.split(":")
    qid, opt = int(qid), int(opt)
    data = await state.get_data()
    if qid != data.get("qid", 0): return await cb.answer("–£–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ üôÇ")
    q = questions[qid]
    right = (opt == q["answer_index"])
    sc = data["score"] + (1 if right else 0)
    await state.update_data(score=sc, qid=qid + 1)
    mark = "‚úÖ" if right else "‚ùå"
    txt = (f"<b>{q['question']}</b>\n\n–¢—ã –≤—ã–±—Ä–∞–ª: {q['options'][opt]} {mark}\n"
           f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['options'][q['answer_index']]}")
    await cb.message.edit_text(txt, parse_mode=ParseMode.HTML)
    await cb.answer()
    await ask_next(cb.message.chat.id, state)

@router.callback_query(F.data.startswith("m:"))
async def toggle(cb: CallbackQuery, state: FSMContext):
    _, qid, opt = cb.data.split(":")
    qid, opt = int(qid), int(opt)
    data = await state.get_data()
    if qid != data.get("qid", 0): return await cb.answer("–£–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ üôÇ")
    multi = data.get("multi", {})
    sel = set(multi.get(str(qid), []))
    sel.remove(opt) if opt in sel else sel.add(opt)
    multi[str(qid)] = list(sorted(sel))
    await state.update_data(multi=multi)
    await cb.message.edit_reply_markup(reply_markup=kb_multi(questions[qid]["options"], qid, sel))
    await cb.answer("–í—ã–±–æ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω")

@router.callback_query(F.data.startswith("mc:"))
async def clear_multi(cb: CallbackQuery, state: FSMContext):
    _, qid = cb.data.split(":")
    qid = int(qid)
    data = await state.get_data()
    if qid != data.get("qid", 0): return await cb.answer("–£–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ üôÇ")
    multi = data.get("multi", {})
    multi[str(qid)] = []
    await state.update_data(multi=multi)
    await cb.message.edit_reply_markup(reply_markup=kb_multi(questions[qid]["options"], qid, set()))
    await cb.answer("–û—á–∏—â–µ–Ω–æ")

@router.callback_query(F.data.startswith("ms:"))
async def submit_multi(cb: CallbackQuery, state: FSMContext):
    _, qid = cb.data.split(":")
    qid = int(qid)
    data = await state.get_data()
    if qid != data.get("qid", 0): return await cb.answer("–£–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ üôÇ")
    q = questions[qid]
    corr, sel = set(q["answer_index"]), set(data.get("multi", {}).get(str(qid), []))
    gain = len(corr & sel)
    sc = data["score"] + gain
    await state.update_data(score=sc, qid=qid + 1)
    txt = (f"<b>{q['question']}</b>\n\n"
           f"–¢—ã –≤—ã–±—Ä–∞–ª: {', '.join(q['options'][i] for i in sel) or '–Ω–∏—á–µ–≥–æ'}\n"
           f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {', '.join(q['options'][i] for i in corr)}\n"
           f"+{gain} –±–∞–ª–ª(–æ–≤)")
    await cb.message.edit_text(txt, parse_mode=ParseMode.HTML)
    await cb.answer()
    await ask_next(cb.message.chat.id, state)

@router.message(Command("leaders"))
async def leaders(msg: types.Message):
    await msg.answer(leaderboard_text(RESULTS_FILE, LEADERS_TOP_N))

# --- RUN ---
async def on_startup(bot: Bot):
    reset_results(RESULTS_FILE)
    await bot.set_webhook(WEBHOOK_URL)
    print("Webhook set to:", WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()

async def main():
    bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    app = web.Application()
    app["bot"] = bot
    dp.startup.register(lambda: on_startup(bot))
    dp.shutdown.register(lambda: on_shutdown(bot))
   
    from aiogram.webhook.aiohttp_server import SimpleRequestHandler
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    print("üöÄ GrandPaQuiz_bot_web running on port", PORT)
    await site.start()
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
